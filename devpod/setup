#!/bin/bash
export DEBIAN_FRONTEND=noninteractive

export XDG_CONFIG_HOME="$HOME"/.config
DOTFILES_DIR="$HOME/dotfiles"
CONFIG_DIR="$HOME/.config"

# Update specific git submodules
git -C "$DOTFILES_DIR" submodule update --init --recursive \
    nvim \
    shell/zsh/zsh-autosuggestions \
    shell/zsh/zsh-syntax-highlighting

create_directories() {
  local directories=("$@")
  for dir in "${directories[@]}"; do
    mkdir -p "$dir" || { echo "Error creating directory $dir"; exit 1; }
  done
}

create_symlinks() {
  local items=("$@")
  for item in "${items[@]}"; do
    IFS=':' read -r source target <<<"$item"
    if [ -L "$target" ]; then
      echo "Removing existing symlink $target"
      unlink "$target"
    elif [ -d "$target" ]; then
      echo "Warning: $target is a directory. Skipping..."
      continue
    fi
    ln -sf "$DOTFILES_DIR/$source" "$target" || { echo "Error creating symlink $target"; exit 1; }
    echo "Created symlink for $source"
  done
}

is_installed() {
    dpkg -l | grep -q "$1"
}

install_nix_deps() {

# Check if we are on an Ubuntu system
if grep -q "Ubuntu" /etc/os-release; then
    echo "You are on Ubuntu."

    # Update package list
    echo "Updating package list..."
    apt update -y

    # Check if curl is installed, if not install it
    if is_installed "curl"; then
        echo "curl is already installed."
    else
        echo "Installing curl..."
        apt install -y curl
    fi

    # Check if xz-utils is installed, if not install it
    if is_installed "xz-utils"; then
        echo "xz-utils is already installed."
    else
        echo "Installing xz-utils..."
        apt install -y xz-utils
    fi

    echo "Installation checks complete."
else
    echo "You are not on Ubuntu. Exiting script."
    exit 1
fi
}

install_nix() {
  # Check if the script is run as root
  if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root. Please run it again with sudo."
    exit 1
  fi

  # Check if nix is already installed
  if command -v nix >/dev/null 2>&1; then
    echo "Nix is already installed."
  else
    echo "Nix is not installed. Proceeding with installation..."
    install_nix_deps
    # Install nix using the official installation script
    yes | sh <(curl -L https://nixos.org/nix/install) --daemon
    if [ $? -eq 0 ]; then
      echo "Nix has been successfully installed."
      source /etc/bashrc
    else
      echo "Nix installation failed."
      exit 1
    fi
  fi
}

change_shell_to_zsh() {
    local user=$1

    # Change the default shell to Zsh for the given user using chsh
    chsh -s $(which zsh) "$user" || {
        echo "Error: Failed to change the default shell to Zsh for user $user."
        exit 1
    }

    echo "Default shell changed to Zsh successfully for user $user."
}

common_directories=(
    "$XDG_CONFIG_HOME/nixpkgs"
)

common_items=(
  "devpod/config.nix:"$XDG_CONFIG_HOME"/nixpkgs/config.nix"
  "nvim:$CONFIG_DIR/nvim"
  "starship.toml:$CONFIG_DIR/starship.toml"
  "shell/zsh:$CONFIG_DIR/zsh"
  "shell/zsh/.zprofile:$HOME/.zprofile"
  "shell/zsh/.zshrc:$HOME/.zshrc"
)

create_directories "${common_directories[@]}"
create_symlinks "${common_items[@]}"

install_nix

# Install Nix packages from config.nix
nix-env -iA nixpkgs.devPackages
echo "Nix packages installed successfully"

change_shell_to_zsh "$(whoami)"

exit 0
